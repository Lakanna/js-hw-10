{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nconst elements = {\n  btnStartTimer: document.querySelector('button[data-start]'),\n  fieldDays: document.querySelector('span[data-days]'),\n  fieldHours: document.querySelector('span[data-hours]'),\n  fieldMinutes: document.querySelector('span[data-minutes]'),\n  fieldSeconds: document.querySelector('span[data-seconds]'),\n  inputDate: document.querySelector('#datetime-picker'),\n};\n\nlet userSelectedDate = 0;\nlet currentTime = Date.now();\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = Number(selectedDates[0]);\n    let differTime = userSelectedDate - currentTime;\n    console.log(differTime);\n\n    if (differTime <= 0) {\n      alert('Please choose a date in the future');\n      elements.btnStartTimer.disabled = true;\n    } else {\n      elements.btnStartTimer.disabled = false;\n    }\n  },\n};\n\nflatpickr('input#datetime-picker', options);\n\nelements.btnStartTimer.addEventListener('click', handlerStartTimer);\n\nfunction handlerStartTimer() {\n  const settimeId = setInterval(getTime, 1000);\n}\n\nfunction getTime() {\n  let currentTime = Date.now();\n  let differTime = userSelectedDate - currentTime;\n  if (differTime <= 0) {\n    return;\n  }\n\n  let restOfTime = convertMs(differTime);\n\n  elements.fieldDays.textContent = restOfTime.days;\n  elements.fieldHours.textContent = addLeadingZero(restOfTime.hours);\n  elements.fieldMinutes.textContent = addLeadingZero(restOfTime.minutes);\n  elements.fieldSeconds.textContent = addLeadingZero(restOfTime.seconds);\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n"],"names":["elements","userSelectedDate","currentTime","options","selectedDates","differTime","flatpickr","handlerStartTimer","getTime","restOfTime","convertMs","addLeadingZero","ms","days","hours","minutes","seconds","value"],"mappings":"oFAGA,MAAMA,EAAW,CACf,cAAe,SAAS,cAAc,oBAAoB,EAC1D,UAAW,SAAS,cAAc,iBAAiB,EACnD,WAAY,SAAS,cAAc,kBAAkB,EACrD,aAAc,SAAS,cAAc,oBAAoB,EACzD,aAAc,SAAS,cAAc,oBAAoB,EACzD,UAAW,SAAS,cAAc,kBAAkB,CACtD,EAEA,IAAIC,EAAmB,EACnBC,EAAc,KAAK,MAEvB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBH,EAAmB,OAAOG,EAAc,CAAC,CAAC,EAC1C,IAAIC,EAAaJ,EAAmBC,EACpC,QAAQ,IAAIG,CAAU,EAElBA,GAAc,GAChB,MAAM,oCAAoC,EAC1CL,EAAS,cAAc,SAAW,IAElCA,EAAS,cAAc,SAAW,EAErC,CACH,EAEAM,EAAU,wBAAyBH,CAAO,EAE1CH,EAAS,cAAc,iBAAiB,QAASO,CAAiB,EAElE,SAASA,GAAoB,CACT,YAAYC,EAAS,GAAI,CAC7C,CAEA,SAASA,GAAU,CACjB,IAAIN,EAAc,KAAK,MACnBG,EAAaJ,EAAmBC,EACpC,GAAIG,GAAc,EAChB,OAGF,IAAII,EAAaC,EAAUL,CAAU,EAErCL,EAAS,UAAU,YAAcS,EAAW,KAC5CT,EAAS,WAAW,YAAcW,EAAeF,EAAW,KAAK,EACjET,EAAS,aAAa,YAAcW,EAAeF,EAAW,OAAO,EACrET,EAAS,aAAa,YAAcW,EAAeF,EAAW,OAAO,CACvE,CAEA,SAASC,EAAUE,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASL,EAAeM,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC"}